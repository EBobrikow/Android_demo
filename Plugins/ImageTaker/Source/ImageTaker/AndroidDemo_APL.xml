<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2020 Isara Technologies. All Rights Reserved. -->
<!--GearVR plugin additions-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
	<!-- init section is always evaluated once per architecture -->
	<trace enable="true"/>
	<init>
		<log text="AndroidDemo init"/>		
	</init>

  <androidManifestUpdates>
    <addElements tag="application">
	  
	  <activity android:name="com.Ebob.AndroidDemo.AndroidAPITemplateActivity"
          android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
          android:label="@string/app_name" />
		  
    </addElements>
    <addPermission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <addPermission android:name="android.permission.READ_EXTERNAL_STORAGE" />
		
  </androidManifestUpdates>

  <!-- optional additions to proguard -->
  <proguardAdditions>
    <insert><![CDATA[
      -keepattributes Signature
      -dontskipnonpubliclibraryclassmembers

     -keepclassmembers class com.epicgames.ue4.GameActivity {
            public <methods>;
            public <fields>;
     }
    ]]></insert>
  </proguardAdditions>

  <resourceCopies>
    <!-- Copy the generated resource file to be packaged -->
  </resourceCopies>

  <AARImports>
  </AARImports>
  
  <!-- optional additions to the GameActivity imports in GameActivity.java -->
	<gameActivityImportAdditions>
	  <insert>
      import java.util.HashSet;
      import java.util.Arrays;
      import android.text.TextUtils;
      import android.os.Handler;
      import android.widget.Toast;
      import android.app.Activity;
      import android.content.Intent;
      import android.graphics.BitmapFactory;
      import android.graphics.BitmapRegionDecoder;
      import android.graphics.BitmapShader;
      import android.database.Cursor;
      import android.graphics.Bitmap;
      import android.media.Image;
      import android.provider.MediaStore;
      import java.io.ByteArrayOutputStream;
      import android.content.ContentResolver;
      import android.provider.DocumentsContract;
      import android.os.Environment;
      import android.content.ContentUris;
    </insert>
	</gameActivityImportAdditions>
	

	<!-- optional additions to the GameActivity class in GameActivity.java -->
	<gameActivityClassAdditions>
		<insert>
      <![CDATA[
      private static native void imagePicked(String code);

      private String getUriRealPath(Context ctx, Uri uri)
      {
      String ret = "";
      if( isAboveKitKat() )
      {
      // Android sdk version number bigger than 19.
      ret = getUriRealPathAboveKitkat(ctx, uri);
      }else
      {
      // Android sdk version number smaller than 19.
      ret = getImageRealPath(getContentResolver(), uri, null);
      }
      return ret;
      }
     
      private String getUriRealPathAboveKitkat(Context ctx, Uri uri)
      {
      String ret = "";
      if(ctx != null && uri != null) {
      if(isContentUri(uri))
      {
      if(isGooglePhotoDoc(uri.getAuthority()))
      {
      ret = uri.getLastPathSegment();
      }else {
      ret = getImageRealPath(getContentResolver(), uri, null);
      }
      }else if(isFileUri(uri)) {
      ret = uri.getPath();
      }else if(isDocumentUri(ctx, uri)){
     
      String documentId = DocumentsContract.getDocumentId(uri);
     
      String uriAuthority = uri.getAuthority();
      if(isMediaDoc(uriAuthority))
      {
      String idArr[] = documentId.split(":");
      if(idArr.length == 2)
      {
     
      String docType = idArr[0];
    
      String realDocId = idArr[1];
    
      Uri mediaContentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
      if("image".equals(docType))
      {
      mediaContentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
      }else if("video".equals(docType))
      {
      mediaContentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
      }else if("audio".equals(docType))
      {
      mediaContentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
      }
     
      String whereClause = MediaStore.Images.Media._ID + " = " + realDocId;
      ret = getImageRealPath(getContentResolver(), mediaContentUri, whereClause);
      }
      }else if(isDownloadDoc(uriAuthority))
      {
    
      Uri downloadUri = Uri.parse("content://downloads/public_downloads");
     
      Uri downloadUriAppendId = ContentUris.withAppendedId(downloadUri, Long.valueOf(documentId));
      ret = getImageRealPath(getContentResolver(), downloadUriAppendId, null);
      }else if(isExternalStoreDoc(uriAuthority))
      {
      String idArr[] = documentId.split(":");
      if(idArr.length == 2)
      {
      String type = idArr[0];
      String realDocId = idArr[1];
      if("primary".equalsIgnoreCase(type))
      {
      ret = Environment.getExternalStorageDirectory() + "/" + realDocId;
      }
      }
      }
      }
      }
      return ret;
      }
    
      private boolean isAboveKitKat()
      {
      boolean ret = false;
      ret = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;
      return ret;
      }
     
      private boolean isDocumentUri(Context ctx, Uri uri)
      {
      boolean ret = false;
      if(ctx != null && uri != null) {
      ret = DocumentsContract.isDocumentUri(ctx, uri);
      }
      return ret;
      }

      private boolean isContentUri(Uri uri)
      {
      boolean ret = false;
      if(uri != null) {
      String uriSchema = uri.getScheme();
      if("content".equalsIgnoreCase(uriSchema))
      {
      ret = true;
      }
      }
      return ret;
      }

      private boolean isFileUri(Uri uri)
      {
      boolean ret = false;
      if(uri != null) {
      String uriSchema = uri.getScheme();
      if("file".equalsIgnoreCase(uriSchema))
      {
      ret = true;
      }
      }
      return ret;
      }

      private boolean isExternalStoreDoc(String uriAuthority)
      {
      boolean ret = false;
      if("com.android.externalstorage.documents".equals(uriAuthority))
      {
      ret = true;
      }
      return ret;
      }

      private boolean isDownloadDoc(String uriAuthority)
      {
      boolean ret = false;
      if("com.android.providers.downloads.documents".equals(uriAuthority))
      {
      ret = true;
      }
      return ret;
      }

      private boolean isMediaDoc(String uriAuthority)
      {
      boolean ret = false;
      if("com.android.providers.media.documents".equals(uriAuthority))
      {
      ret = true;
      }
      return ret;
      }

      private boolean isGooglePhotoDoc(String uriAuthority)
      {
      boolean ret = false;
      if("com.google.android.apps.photos.content".equals(uriAuthority))
      {
      ret = true;
      }
      return ret;
      }

      private String getImageRealPath(ContentResolver contentResolver, Uri uri, String whereClause)
      {
      String ret = "";

      Cursor cursor = contentResolver.query(uri, null, whereClause, null, null);
      if(cursor!=null)
      {
      boolean moveToFirst = cursor.moveToFirst();
      if(moveToFirst)
      {

      String columnName = MediaStore.Images.Media.DATA;
      if( uri==MediaStore.Images.Media.EXTERNAL_CONTENT_URI )
      {
      columnName = MediaStore.Images.Media.DATA;
      }else if( uri==MediaStore.Audio.Media.EXTERNAL_CONTENT_URI )
      {
      columnName = MediaStore.Audio.Media.DATA;
      }else if( uri==MediaStore.Video.Media.EXTERNAL_CONTENT_URI )
      {
      columnName = MediaStore.Video.Media.DATA;
      }

      int imageColumnIndex = cursor.getColumnIndex(columnName);

      ret = cursor.getString(imageColumnIndex);
      }
      }
      return ret;
      }

      public void AndroidThunkJava_AndroidAPI_GrabImage()
      {
      runOnUiThread(new Runnable()
      {
      public void run()
      {
      Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
      photoPickerIntent.setType("image/*");
      startActivityForResult(photoPickerIntent, 100);
      }
      });
      }

      ]]>
    </insert>
	</gameActivityClassAdditions>
	
	<!-- optional additions to GameActivity onCreate metadata reading in GameActivity.java -->
	<gameActivityReadMetadataAdditions>
	<insert>

  </insert>
	</gameActivityReadMetadataAdditions>
	
	<!-- optional additions to GameActivity onCreate in GameActivity.java -->
	<gameActivityOnCreateAdditions>
		<insert>
		<![CDATA[
		]]>
		</insert>
	</gameActivityOnCreateAdditions>

	<!-- optional additions to GameActivity onDestroy in GameActivity.java -->
	<gameActivityOnDestroyAdditions>
		<insert>
		
		</insert>
	</gameActivityOnDestroyAdditions>
	
	
	<!-- optional additions to GameActivity onStart in GameActivity.java -->
	<gameActivityOnStartAdditions>
		<insert>
		
		</insert>
	</gameActivityOnStartAdditions>

	<!-- optional additions to GameActivity onStop in GameActivity.java -->
	<gameActivityOnStopAdditions>
		<insert>
		
		</insert>
	</gameActivityOnStopAdditions>
	

	<!-- optional additions to GameActivity onPause in GameActivity.java	-->
	<gameActivityOnPauseAdditions>
    <insert>
    <![CDATA[
    ]]>
    </insert>
  </gameActivityOnPauseAdditions>


  <!-- optional additions to GameActivity onResume in GameActivity.java	-->
  <gameActivityOnResumeAdditions>
    <insert>
    </insert>
  </gameActivityOnResumeAdditions>


	<!-- optional additions to GameActivity onActivityResult in GameActivity.java -->
	<gameActivityOnActivityResultAdditions>
		<insert>
      <![CDATA[
      
       if (requestCode == 100 && resultCode == RESULT_OK) {          
            final String dataString = data.getDataString();
            final Uri imageUri = data.getData();
            final String path = imageUri.getPath();
            String imgPath = getUriRealPath(getApplicationContext(), imageUri);
            if (!dataString.isEmpty())
            {
							imagePicked(imgPath);
            }                    
        }else {
            Toast.makeText(getApplicationContext(), "You haven't picked Image",Toast.LENGTH_LONG).show();
        }
      
    ]]>
      
		</insert>
    </gameActivityOnActivityResultAdditions>
	

	<!-- optional libraries to load in GameActivity.java before libUE4.so -->
	<soLoadLibrary>
		<!-- need this if plugin enabled and supported architecture, even if not packaged for GearVR -->
	</soLoadLibrary>
</root>
